#!/bin/bash -e

source $OPENSHIFT_CARTRIDGE_SDK_BASH

BPMS_BIN_DIR=${OPENSHIFT_BPMS_DIR}/bin
BPMS_PID_FILE=${OPENSHIFT_HOMEDIR}/app-root/runtime/BPMS.pid
BPMS_DEPLOYMENTS_DIR=${OPENSHIFT_BPMS_DIR}/standalone/deployments
SCANCONFIG=""

source $BPMS_BIN_DIR/util

cartridge_type="bpms"
BPMS_version="6.0.1"

# Debugging purposes
DEBUG=1
DEBUG_FILE=$OPENSHIFT_BPMS_DIR/scripts-debug.log
function doDebug() {
    if [ $DEBUG -eq 1 ]; then
        MESSAGE=$1
        TS=`date +%Y%m%d-%T`
        MESSAGE_TO_PRINT="$TS - $1"
        echo $MESSAGE_TO_PRINT >> $DEBUG_FILE
        client_result $MESSAGE_TO_PRINT
    fi
}

# Return the deployment-scanner configuration
function getscanconfig() {

    # Debugging
    doDebug "Executing: control - getscanconfig"
    
    count=0
    while [ ${count} -lt 4 ]; do
      controller="${OPENSHIFT_BPMS_IP}:${OPENSHIFT_BPMS_MANAGEMENT_NATIVE_PORT}"
      scanconfig=`jboss-cli.sh -c --controller=${controller} "/subsystem=deployment-scanner/:read-resource(recursive=true)" 2>&1 || :`
      if [[ $scanconfig =~ '"outcome" => "success"' ]] ; then
        SCANCONFIG=$scanconfig
        return
      fi
      let count+=1

      sleep 2
    done
}

# Wait for deployments
function waitondeployments() {

    # Debugging
    doDebug "Executing: control - waitondeployments"
        
    if ! ismgmtup; then
      client_message "Timed out waiting for management listening port"
      client_message "Could not connect to JBoss management interface, skipping deployment verification"
    else 
        pushd $BPMS_DEPLOYMENTS_DIR

        artifacts=()
        while read -r -d $'\0'; do
          artifacts+=("$REPLY")
        done < <(find . -iregex '.*\.\([ejrsw]ar\|zip\)$' -print0)

	# Deploy archive and exploded
        deployexploded=true
        deployarchive=true

        artifactsdeployed=()
        artifactsfailed=()
        artifactsskipped=()
        artifactsunknown=()
        for artifact in ${artifacts[*]}; do
          if ( [ -f $artifact ] && $deployarchive ) || ( [ -d $artifact ] && $deployexploded ); then         
            # TODO triple check this logic, add a timeout 
            while [ -f ${artifact}.isdeploying ]; do
              sleep 8
            done

            if [ -f ${artifact}.deployed ]; then
              artifactsdeployed+=($artifact)
            elif [ -f ${artifact}.failed ]; then
              artifactsfailed+=($artifact)
            else
              artifactsunknown+=($artifact)
            fi

          else
            # artifact skipped because of deployment scanner config
            artifactsskipped+=($artifact)
          fi
        done

        popd

        if [ ${#artifactsskipped[@]} -gt 0 ]; then
          echo "Artifacts skipped because of deployment-scanner configuration: ${artifactsskipped[*]}"
        fi

        if [ ${#artifactsfailed[@]} -gt 0 ]; then
          echo "Failed deployments: ${artifactsfailed[*]}"
        fi

        if [ ${#artifactsdeployed[@]} -gt 0 ]; then
          echo "Artifacts deployed: ${artifactsdeployed[*]}"
        fi

        if [ ${#artifactsunknown[@]} -gt 0 ]; then
          echo "Artifacts in an unknown state: ${artifactsunknown[*]}"
        fi
    fi
}

# Check if the bpms process is running
function isrunning() {
    
    # Debugging
    doDebug "Executing: control - isrunning"
        
    # Check for running app
    if [ -f "$BPMS_PID_FILE" ]; then
      jbpid=$(cat $BPMS_PID_FILE);
      if /bin/ps --pid $jbpid 1>&2 >/dev/null;
      then
        return 0
      fi
    fi
   
    return 1
}

# Kill the process given by $1 and its children
killtree() {

    # Debugging
    doDebug "Executing: control - killtree"
    
    local _pid=$1
    for _child in $(ps -o pid --no-headers --ppid ${_pid}); do
        killtree ${_child}
    done

    local should_be_gone_pid=$(ps -o pid -p ${_pid} --no-headers)
    if [ -z "$should_be_gone_pid" ]; then
        return
    else
        # process might have finished stopping after the ps check above
        # so prevent kill from throwing an error (which would exit the script due to bash -e)
        # with || true
        kill -TERM ${_pid} || true
    fi

    local count=0
    while [ ${count} -lt 15 ]
    do
        local should_be_gone_pid=$(ps -o pid -p ${_pid} --no-headers)
        if [ -z "$should_be_gone_pid" ]; then
                return
        else
                sleep 2
                let count=${count}+1
        fi
    done

    local should_be_gone_pid=$(ps -o pid -p ${_pid} --no-headers)
    if [ ! -z $should_be_gone_pid ]
    then
        kill -9 ${_pid}
    fi
}

# Check if the server http port is up
function ishttpup() {

    # Debugging
    doDebug "Executing: control - ishttpup"
    
    count=0
    while [ ${count} -lt 64 ]
    do
        if echo 2> /dev/null > "/dev/tcp/${OPENSHIFT_BPMS_IP}/${OPENSHIFT_BPMS_HTTP_PORT}"; then
            echo "Found ${OPENSHIFT_BPMS_IP}:${OPENSHIFT_BPMS_HTTP_PORT} listening port"
            return 0
        fi
        # if the process failed to start, error out immediately
        # rather than waiting for the timeout on the port being available.
        if ! ps | grep -v grep | grep $PROCESS_ID > /dev/null; then
          return 2
        fi

        let count=${count}+1

        sleep 2
    done

    return 1
}

# Check if the server mgmt port is up
function ismgmtup() {

    # Debugging
    doDebug "Executing: control - ismgmtup"
    
    let count=0
    while [ ${count} -lt 10 ]
    do
        if echo 2> /dev/null > "/dev/tcp/${OPENSHIFT_BPMS_IP}/${OPENSHIFT_BPMS_MANAGEMENT_NATIVE_PORT}"; then
            echo "Found ${OPENSHIFT_BPMS_IP}:${OPENSHIFT_BPMS_MANAGEMENT_NATIVE_PORT} listening port"
            return 0
        fi
        let count=${count}+1

        sleep 2
    done

    return 1
}

function build() {

  # Debugging
  doDebug "Executing: control - build"
  
  echo "Building $cartridge_type cartridge"

  CONFIG_DIR="${OPENSHIFT_BPMS_DIR}/standalone/configuration"
  OPENSHIFT_MAVEN_MIRROR="${OPENSHIFT_BPMS_M2_REPO}/settings.xml"

  max_memory_mb=${OPENSHIFT_GEAR_MEMORY_MB}

  # If hot deploy is enabled, we need to restrict the Maven memory size to fit
  # alongside the running application server. For now, just hard-code it to 64
  # and figure out how to apply a scaling factor later.
  if hot_deploy_enabled_for_latest_deployment
  then
      echo "Scaling down Maven heap settings due to presence of hot_deploy marker"

      if [ -z "$MAVEN_JVM_HEAP_RATIO" ]; then
      MAVEN_JVM_HEAP_RATIO=0.25
    fi
  else
    if [ -z "$MAVEN_JVM_HEAP_RATIO" ]; then
      MAVEN_JVM_HEAP_RATIO=0.75
    fi
  fi

  max_heap=$( echo "$max_memory_mb * $MAVEN_JVM_HEAP_RATIO" | bc | awk '{print int($1+0.5)}')

  OPENSHIFT_MAVEN_XMX="-Xmx${max_heap}m"

  if [ -z "$BUILD_NUMBER" ]
  then
      if force_clean_build_enabled_for_latest_deployment
      then
          echo "Force-clean build is enabled. Removing Maven dependencies." 1>&2
          rm -rf ${OPENSHIFT_BPMS_M2_REPO}/repository/* ${OPENSHIFT_BPMS_M2_REPO}/repository/.[^.]*
      fi

      if [ -f ${OPENSHIFT_REPO_DIR}pom.xml ] && ! marker_present skip_maven_build
      then
          pushd ${OPENSHIFT_REPO_DIR} > /dev/null

          if [ -z "$MAVEN_OPTS" ]; then
            export MAVEN_OPTS="$OPENSHIFT_MAVEN_XMX"
          fi

          if [ -z "$MAVEN_ARGS" ]; then
            export MAVEN_ARGS="clean install -Popenshift -DskipTests"
          fi

          echo "Found pom.xml... attempting to build with 'mvn -e ${MAVEN_ARGS}'"

          if [ -n "$OPENSHIFT_MAVEN_MIRROR" ]
          then
              mvn --global-settings $OPENSHIFT_MAVEN_MIRROR --version
              mvn --global-settings $OPENSHIFT_MAVEN_MIRROR $MAVEN_ARGS
          else
              mvn --version
              mvn $MAVEN_ARGS
          fi
          popd > /dev/null

          CART_NAME=${cartridge_type}
      fi
      
      if [ ! -f ${OPENSHIFT_REPO_DIR}pom.xml ]; then
        echo "Skipping Maven build due to absence of pom.xml"      
      fi

      if marker_present "skip_maven_build"; then
        echo "skip_maven_build marker found; build will be skipped"
      fi

  fi

}

function deploy() {

  # Debugging
  doDebug "Executing: control - deploy"
  
  echo "Deploying JBoss BPM Suite"

  # if repo/deployments has any files in it, sync them to $BPMS_DEPLOYMENTS_DIR
  # and delete any files in $BPMS_DEPLOYMENTS_DIR that don't exist in
  # repo/deployments
  if [ "$(ls ${OPENSHIFT_REPO_DIR}/deployments 2>/dev/null)" ]; then
     rsync -r --delete ${OPENSHIFT_REPO_DIR}/deployments/ROOT.war $BPMS_DEPLOYMENTS_DIR/ROOT.war
   fi
  }

function start() {

  # Debugging
  doDebug "Executing: control - start"
  
  # Check configuration files are present in cartridge git repo.
  check_config_files

  # Start the java stat daemon (JVM process monitoring).
  # jstatd -J-Djava.security.policy=${BPMS_BIN_DIR}/jstatd.all.policy &

  if marker_present "enable_jpda"; then
    export ENABLE_JPDA=1
  fi

  # Check for running app
  if isrunning; then
    echo "Application is already running"
  else
    CONFIG_DIR="${OPENSHIFT_BPMS_DIR}/standalone/configuration"

    echo "Starting $cartridge_type cartridge"
    
    # Copy the standalone.xml configuration file from cartridge git repository.
    rm -f ${CONFIG_DIR}/standalone.xml
    cp -f ${OPENSHIFT_REPO_DIR}/${OPENSHIFT_BPMS_CONFIG_PATH}/standalone.xml ${CONFIG_DIR}/standalone.xml
    
    ${BPMS_BIN_DIR}/standalone.sh > ${OPENSHIFT_TMP_DIR}/${cartridge_type}.log 2>&1 &
    PROCESS_ID=$!
    echo "$PROCESS_ID" > ${BPMS_PID_FILE}

    rc=0
    ishttpup || rc=$?
    if [ $rc -eq 1 ]; then
      echo "Timed out waiting for http listening port for $cartridge_type process"
      exit 1
    elif [ $rc -eq 2 ]; then
      echo "$cartridge_type process failed to start"
      exit 2
    fi
    waitondeployments
  fi
}


function stop() {

  # Debugging
  doDebug "Executing: control - stop"
      
  echo "Stopping $cartridge_type cartridge"

  # Kill the java stat daemon (JVM process monitoring).
  # killall jstatd

  if isrunning; then
		if [ -f "$BPMS_PID_FILE" ]; then
			pid=$(cat $BPMS_PID_FILE);
	    echo "Sending SIGTERM to jboss:$pid ..." 1>&2
	    killtree $pid
	  else 
	    echo "Failed to locate JBOSS PID File" 1>&2
	  fi
	fi
}

function restart() {

    # Debugging
    doDebug "Executing: control - restart"
    
    stop
    start
}

function status() {

   # Debugging
   doDebug "Executing: control - status"
   
   if isrunning
   then
      client_result "Application is running"
   else
      client_result "Application is either stopped or inaccessible"
   fi
}

function reload() {
    # Debugging
    doDebug "Executing: control - reload"
    
    restart
}

# Clean up any log files
function tidy() {

  # Debugging
  doDebug "Executing: control - tidy"
  
  client_message "Emptying log dir: $OPENSHIFT_BPMS_LOG_DIR"
  shopt -s dotglob
  rm -rf $OPENSHIFT_BPMS_LOG_DIR/*
  rm -rf $OPENSHIFT_BPMS_DIR/standalone/tmp/*
}

function threaddump() {

  # Debugging
  doDebug "Executing: control - threaddump"
  
  echo "Thread dump for $cartridge_type cartridge"

    if ! isrunning; then
        echo "Application is stopped"
        exit 1
    elif [ -f "$BPMS_PID_FILE" ]; then
        pid=$(cat $BPMS_PID_FILE);
        java_pid=$(ps h --ppid $pid -o '%p')
        kill -3 $java_pid
        client_result "Success"
        client_result ""
        client_result "The thread dump file will be available via: rhc tail $OPENSHIFT_APP_NAME -g $OPENSHIFT_GEAR_UUID -f ${OPENSHIFT_TMP_DIR}${cartridge_type}.log -o '-n 250'"
    else 
        echo "Failed to locate BPMS PID File"
    fi
}

function pre_restore() {

  # Debugging
  doDebug "Executing: control - pre_restore"
  
  # this directory contains cached versions of the built jsps which will continue
  # to get used because they have newer dates than the restored archive.
  rm -rf $OPENSHIFT_BPMS_DIR/standalone/tmp/*
}

# Check configuration helper methods.
function check_config_files() {
    STANDALONE_FILE_PATH=${OPENSHIFT_REPO_DIR}/${OPENSHIFT_BPMS_CONFIG_PATH}/standalone.xml
    BPMS_USERS_FILE_PATH=${OPENSHIFT_REPO_DIR}/${OPENSHIFT_BPMS_CONFIG_PATH}/${OPENSHIFT_BPMS_USERS_FILE}
    BPMS_ROLES_FILE_PATH=${OPENSHIFT_REPO_DIR}/${OPENSHIFT_BPMS_CONFIG_PATH}/${OPENSHIFT_BPMS_ROLES_FILE}
    SETTINGS_FILE_PATH=${OPENSHIFT_BPMS_M2_REPO}/settings.xml
    
    # Check standalone configuration file is present in cartridge git repo.
    check_config_file $STANDALONE_FILE_PATH
    
    # Check users config file is present in cartridge git repo.
    check_config_file $BPMS_USERS_FILE_PATH
        
    # Check roles config file is present in cartridge git repo.
    check_config_file $BPMS_ROLES_FILE_PATH
    
    # Check settings.xml config file is present in cartridge git repo.
    check_config_file $SETTINGS_FILE_PATH
}

function check_config_file() {
    FILE_PATH=$1
    FILE_NAME=$(basename $FILE_PATH)
    
    # Check file is present in cartridge git repo.
    if [ ! -f $FILE_PATH ]; then
        client_error "Configuration file $FILE_NAME does not exist."
        exit 1
    fi
}

export OPENSHIFT_SECRET_TOKEN=${OPENSHIFT_SECRET_TOKEN:-OPENSHIFT_APP_UUID}

case "$1" in
  build)           build ;;
  deploy)          deploy ;;
  pre-restore)     pre_restore ;;
  start)           start ;;
  stop)            stop ;;
  restart)         restart ;;
  status)          status ;;
  reload)          reload ;;
  tidy)            tidy ;;
  threaddump)      threaddump ;;
  update-configuration) update-configuration;;
  *)               exit 0
esac


